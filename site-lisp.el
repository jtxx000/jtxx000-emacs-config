(defun goto-line-sexp ()
  (interactive)
  (beginning-of-line)
  (if (= (point)
         (save-excursion (progn (forward-sexp) (line-beginning-position))))
      (auto-indent/beginning-of-line)
    (end-of-line)
    (backward-sexp)))

(defun lisp-transpose-lines (num)
  (interactive "p")
  (goto-line-sexp)
  (transpose-sexps num))

(defun lisp-delete-line ()
  (interactive)
  (goto-line-sexp)
  (kill-sexp))

(defun lisp-duplicate-line ()
  (interactive)
  (goto-line-sexp)
  (let ((line (buffer-substring (point) (progn (forward-sexp) (point)))))
    (newline-and-indent)
    (insert line)))

(defun site-lisp-init ()
  (paredit-mode)
  (auto-indent-hook)
  
  (setf auto-indent/delete-char-function 'paredit-forward-delete)
  (setf auto-indent/backward-delete-char-function 'paredit-backward-delete)

  (define-key paredit-mode-map (kbd ")") 'paredit-close-round-and-newline)
  (define-key paredit-mode-map (kbd "C-!") 'paredit-backward-slurp-sexp)
  (define-key paredit-mode-map (kbd "C-@") 'paredit-forward-slurp-sexp)
  (define-key paredit-mode-map (kbd "C-(") nil)
  (define-key paredit-mode-map (kbd "C-)") nil)
  (define-key paredit-mode-map (kbd "M-0") 'paredit-close-round)
  (define-key paredit-mode-map (kbd "M-9") 'paredit-wrap-round)
  (define-key paredit-mode-map (kbd "C-<left>") nil)
  (define-key paredit-mode-map (kbd "C-<right>") nil)
  (define-key paredit-mode-map (kbd "M-<up>") nil)
  (define-key paredit-mode-map (kbd "M-<down>") nil)
  (define-key paredit-mode-map (kbd "<delete>") nil)

  (local-set-key (kbd "C-x C-t") 'lisp-transpose-lines)
  (local-set-key (kbd "M-<backspace>") 'lisp-delete-line)
  (local-set-key (kbd "C-'") 'lisp-duplicate-line))

(add-hook 'emacs-lisp-mode-hook 'site-lisp-init)
(add-hook 'scheme-mode-hook 'site-lisp-init)